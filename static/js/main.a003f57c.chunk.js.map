{"version":3,"sources":["main/ui/common/Input/Input.module.css","main/ui/common/Button/Button.tsx","main/ui/common/Checkbox/Checkbox.tsx","main/ui/common/Input/Input.tsx","main/ui/SuperComponents.tsx","main/ui/app/App.tsx","reportWebVitals.ts","index.tsx","main/ui/common/Button/Button.module.css","main/ui/common/Checkbox/Checkbox.module.css"],"names":["module","exports","Button","red","className","restProps","finalClassName","styles","button","default","Checkbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","Input","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","errorInput","value","key","SuperComponents","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,qBAAqB,WAAa,0BAA0B,SAAW,wBAAwB,MAAQ,qBAAqB,KAAO,oBAAoB,OAAS,wB,iLCK/OC,EAA8B,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,UAAcC,EAAe,mCACrEC,EAAc,UAAMH,EAAMI,IAAOC,OAASD,IAAOE,QAAnC,YAA8CL,GAClE,OACI,gDACIA,UAAWE,GACPD,GAFR,0B,gBCkCOK,EAhCoC,SAAC,GAS/C,EAPGC,KAOF,IANEC,EAMH,EANGA,SAAUC,EAMb,EANaA,gBACVT,EAKH,EALGA,UACAU,GAIH,EALcC,cAKd,EAJGD,UAEGT,EAEN,4FAOKW,EAAmB,UAAMT,IAAOU,SAAb,YAAyBb,GAAwB,IAE1E,OACI,kCACI,mCACIO,KAAM,WACNC,SAZa,SAACM,GAEtBN,GAAYA,EAASM,GACrBL,GAAmBA,EAAgBK,EAAEC,cAAcC,UAU3ChB,UAAWY,GAEPX,IAEPS,GAAY,sBAAMV,UAAWG,IAAOQ,cAAxB,SAAwCD,Q,iBCxBpDO,EAA2C,SAAC,GASpD,EAPGV,KAOF,IANEC,EAMH,EANGA,SAAUU,EAMb,EANaA,aACVC,EAKH,EALGA,WAAYC,EAKf,EALeA,QACZC,EAIH,EAJGA,MACArB,EAGH,EAHGA,UACGC,EAEN,6FAaKqB,EAAkB,UAAMnB,IAAOkB,OAC/BT,EAAmB,UAAMT,IAAOoB,WAAb,YAA2BvB,GAAsB,IAE1E,OACI,qCACI,mCACIO,KAAM,OACNC,SAnBa,SAACM,GACtBN,GACGA,EAASM,GACZI,GAAgBA,EAAaJ,EAAEC,cAAcS,QAiBrCL,WAfe,SAACL,GACxBK,GAAcA,EAAWL,GACzBM,GACa,UAAVN,EAAEW,KACFL,KAYKpB,UAAWY,GAEPX,IAEPoB,GAAS,sBAAMrB,UAAWsB,EAAjB,SAAsCD,QC5C/CK,EAAkB,WAC3B,OACI,qCACI,8BACI,cAAC,EAAD,MAEJ,8BACI,cAAC,EAAD,MAEJ,8BACI,cAAC,EAAD,UCIDC,MAbf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,IAAD,CAAY4B,SAAUC,gBAAtB,SACI,cAAC,EAAD,SCIKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAlC,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,SAAW,2BAA2B,cAAgB,mC","file":"static/js/main.a003f57c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Input_textInput__1TErF\",\"input\":\"Input_input__sRd2N\",\"error\":\"Input_error__mZTsf\",\"errorInput\":\"Input_errorInput__1BD2z\",\"standard\":\"Input_standard__2T1oa\",\"light\":\"Input_light__1qk7f\",\"dark\":\"Input_dark__xwo47\",\"purple\":\"Input_purple__1SRGn\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps, FC} from 'react';\r\nimport styles from \"./Button.module.css\"\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype ButtonPropsType = DefaultButtonPropsType & {red?: boolean}\r\n\r\nexport const Button: FC<ButtonPropsType> = ({red, className, ...restProps}) => {\r\n    const finalClassName = `${red ? styles.button : styles.default} ${className}`\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        >\r\n            Button\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport styles from './Checkbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst Checkbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${styles.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={styles.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default Checkbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport styles from './Input.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Input: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${styles.error}`\r\n    const finalInputClassName = `${styles.errorInput} ${className? className: \"\"}`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Button} from './common/Button/Button';\r\nimport Checkbox from './common/Checkbox/Checkbox';\r\nimport {Input} from \"./common/Input/Input\";\r\n\r\nexport const SuperComponents = () => {\r\n    return (\r\n        <>\r\n            <div>\r\n                <Input/>\r\n            </div>\r\n            <div>\r\n                <Checkbox/>\r\n            </div>\r\n            <div>\r\n                <Button/>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {SuperComponents} from \"../SuperComponents\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename={process.env.PUBLIC_URL}>\r\n          <SuperComponents/>\r\n       {/* <Provider>*/}\r\n      {/*<Main/>*/}\r\n       {/* </Provider>*/}\r\n        </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3BfUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__-QR71\",\"checkbox\":\"Checkbox_checkbox__22AOn\",\"spanClassName\":\"Checkbox_spanClassName__2HDTy\"};"],"sourceRoot":""}